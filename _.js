// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function() {
	var tests = ["test3"];
	var _g = 0;
	while(_g < tests.length) {
		var test = tests[_g];
		++_g;
		this.testParse(test);
	}
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.prototype = {
	testParse: function(file) {
		console.log("_____________");
		console.log("testing " + file);
		console.log("_____________");
		var str = haxe_Resource.getString(file);
		console.log("xml input >");
		console.log(str);
		console.log("......");
		var s;
		var spaces = 0;
		var strIter = new nodule_StringCodeIterator(str);
		strIter.c = strIter.str.charCodeAt(strIter.pos++);
		var rootNodule = new nodule_Nodule();
		rootNodule.name = "root";
		var parent = rootNodule;
		var nodule1 = null;
		var spaceBuf = new StringBuf();
		while(strIter.pos < strIter.length) {
			switch(strIter.c) {
			case 10:case 13:
				break;
			case 60:
				s = spaceBuf.b;
				if(spaces != s.length) {
					if(nodule1 != null) {
						nodule1.content = s;
					}
				}
				spaces = 0;
				strIter.c = strIter.str.charCodeAt(strIter.pos++);
				spaceBuf = new StringBuf();
				strIter.b = new StringBuf();
				switch(strIter.c) {
				case 33:
					strIter.b = new StringBuf();
					while(strIter.c != 62) {
						strIter.b.b += String.fromCharCode(strIter.c);
						strIter.c = strIter.str.charCodeAt(strIter.pos++);
					}
					strIter.last2 = strIter.last;
					strIter.last = strIter.b.b;
					var s1 = strIter.last;
					s1 = HxOverrides.substr(s1,3,s1.length - 5);
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
					break;
				case 47:
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
					strIter.b = new StringBuf();
					while(strIter.c != 62) {
						strIter.b.b += String.fromCharCode(strIter.c);
						strIter.c = strIter.str.charCodeAt(strIter.pos++);
					}
					strIter.last2 = strIter.last;
					strIter.last = strIter.b.b;
					if(strIter.last == parent.name) {
						parent = parent.parent;
					}
					break;
				case 63:
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
					strIter.b = new StringBuf();
					while(strIter.c != 63) {
						strIter.b.b += String.fromCharCode(strIter.c);
						strIter.c = strIter.str.charCodeAt(strIter.pos++);
					}
					strIter.last2 = strIter.last;
					strIter.last = strIter.b.b;
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
					break;
				default:
					strIter.b = new StringBuf();
					while(strIter.c != 62 && strIter.c != 32) {
						strIter.b.b += String.fromCharCode(strIter.c);
						strIter.c = strIter.str.charCodeAt(strIter.pos++);
					}
					strIter.last2 = strIter.last;
					strIter.last = strIter.b.b;
					var node = new nodule_Nodule();
					node.name = strIter.last;
					nodule1 = node;
					parent.addChild(node);
					parent = node;
					var att = null;
					var toggle = true;
					while(strIter.c != 62) switch(strIter.c) {
					case 32:case 61:
						strIter.c = strIter.str.charCodeAt(strIter.pos++);
						break;
					default:
						strIter.b = new StringBuf();
						while(strIter.c != 62 && strIter.c != 32 && strIter.c != 61) {
							strIter.b.b += String.fromCharCode(strIter.c);
							strIter.c = strIter.str.charCodeAt(strIter.pos++);
						}
						strIter.last2 = strIter.last;
						strIter.last = strIter.b.b;
						var s2 = strIter.last;
						if(toggle) {
							var att_ = new nodule_Nodule();
							att = att_;
							att_.name = s2;
							node.addAttribute(att_);
						} else {
							att.content = HxOverrides.substr(s2,1,s2.length - 2);
						}
						toggle = !toggle;
					}
				}
				break;
			default:
				if(strIter.c == 32) {
					++spaces;
				}
				spaceBuf.b += String.fromCharCode(strIter.c);
			}
			strIter.c = strIter.str.charCodeAt(strIter.pos++);
		}
		console.log("children of " + rootNodule.firstChild.name);
		var nodule2 = rootNodule.firstChild;
		var v = null;
		var this1;
		if(v == null) {
			v = nodule__$ArrayPair_ArrayPair_$Impl_$._new([]);
		}
		this1 = v;
		console.log(nodule__$ArrayPair_ArrayPair_$Impl_$.toString(nodule2.children(this1)));
		console.log("attributes of " + rootNodule.firstChild.firstChild.name);
		var nodule3 = rootNodule.firstChild.firstChild;
		var v1 = null;
		var this2;
		if(v1 == null) {
			v1 = nodule__$ArrayPair_ArrayPair_$Impl_$._new([]);
		}
		this2 = v1;
		console.log(nodule__$ArrayPair_ArrayPair_$Impl_$.toString(nodule3.attributes(this2)));
	}
	,__class__: Main
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			return haxe_crypto_Base64.decode(x.data).toString();
		}
	}
	return null;
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var nodule__$ArrayPair_ArrayPair_$Impl_$ = {};
nodule__$ArrayPair_ArrayPair_$Impl_$.__name__ = true;
nodule__$ArrayPair_ArrayPair_$Impl_$._new = function(v) {
	var this1;
	if(v == null) {
		v = nodule__$ArrayPair_ArrayPair_$Impl_$._new([]);
	}
	this1 = v;
	return this1;
};
nodule__$ArrayPair_ArrayPair_$Impl_$.getEmpty = function() {
	return nodule__$ArrayPair_ArrayPair_$Impl_$._new([]);
};
nodule__$ArrayPair_ArrayPair_$Impl_$.toString = function(this1) {
	var out = "( ";
	var vp;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		vp = this1[_g1++];
		out += "name: " + vp.name + ", value: " + vp.value + ", ";
	}
	out = HxOverrides.substr(out,0,out.length - 2);
	out += " )";
	return out;
};
var nodule_Nodule = function() {
};
nodule_Nodule.__name__ = true;
nodule_Nodule.prototype = {
	addChild: function(nodule1) {
		nodule1.parent = this;
		if(this.firstChild == null) {
			this.firstChild = nodule1;
			nodule1.parent = this;
		} else {
			this.firstChild.addSister(nodule1);
			nodule1.parent = this;
		}
	}
	,addSister: function(nodule1) {
		if(this.nextSister == null) {
			this.nextSister = nodule1;
			nodule1.prevSister = this;
			nodule1.parent = this.parent;
		} else {
			this.nextSister.addSister(nodule1);
		}
	}
	,addAttribute: function(nodule1) {
		nodule1.parent = this;
		if(this.firstAttribute == null) {
			this.firstAttribute = nodule1;
			nodule1.parent = this;
		} else {
			this.firstAttribute.addSister(nodule1);
			nodule1.parent = this;
		}
	}
	,attributes: function(arr) {
		if(this.firstAttribute != null) {
			this.firstAttribute.sistersNextArray(arr);
		}
		return arr;
	}
	,children: function(arr) {
		if(this.firstChild != null) {
			this.firstChild.sistersNextArray(arr);
		}
		return arr;
	}
	,sistersNextArray: function(arr) {
		var len = 0;
		if(this.content != null) {
			len = 1;
			arr[0] = { name : this.name, value : this.content};
		}
		var scope = this;
		var n = scope.nextSister;
		while(n != null) {
			if(n.content != null) {
				arr[len++] = { name : n.name, value : n.content};
			}
			scope = n;
			n = scope.nextSister;
		}
		return arr;
	}
	,attributeNames: function() {
		if(this.firstAttribute != null) {
			console.log("attributes");
			this.firstAttribute.sistersNameNext();
		}
	}
	,attributeContents: function() {
		if(this.firstAttribute != null) {
			this.firstAttribute.sistersContentNext();
		}
	}
	,childrenNames: function() {
		if(this.firstChild != null) {
			this.firstChild.sistersNameNext();
		}
	}
	,childrenContents: function() {
		if(this.firstChild != null) {
			this.firstChild.sistersContentNext();
		}
	}
	,sistersNameNext: function() {
		if(this.name != null) {
			console.log(this.name);
		}
		var scope = this;
		var n = scope.nextSister;
		while(n != null) {
			if(this.name != null) {
				console.log(n.name);
			}
			scope = n;
			n = scope.nextSister;
		}
	}
	,sistersContentNext: function() {
		if(this.content != null) {
			console.log(this.content);
		}
		var scope = this;
		var n = scope.nextSister;
		while(n != null) {
			if(n.content != null) {
				console.log(n.content);
			}
			scope = n;
			n = scope.nextSister;
		}
	}
	,__class__: nodule_Nodule
};
var nodule_ReadXML = function() { };
nodule_ReadXML.__name__ = true;
nodule_ReadXML.parse = function(str_) {
	var s;
	var spaces = 0;
	var strIter = new nodule_StringCodeIterator(str_);
	strIter.c = strIter.str.charCodeAt(strIter.pos++);
	var rootNodule = new nodule_Nodule();
	rootNodule.name = "root";
	var parent = rootNodule;
	var nodule1 = null;
	var spaceBuf = new StringBuf();
	while(strIter.pos < strIter.length) {
		switch(strIter.c) {
		case 10:case 13:
			break;
		case 60:
			s = spaceBuf.b;
			if(spaces != s.length) {
				if(nodule1 != null) {
					nodule1.content = s;
				}
			}
			spaces = 0;
			strIter.c = strIter.str.charCodeAt(strIter.pos++);
			spaceBuf = new StringBuf();
			strIter.b = new StringBuf();
			switch(strIter.c) {
			case 33:
				strIter.b = new StringBuf();
				while(strIter.c != 62) {
					strIter.b.b += String.fromCharCode(strIter.c);
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
				}
				strIter.last2 = strIter.last;
				strIter.last = strIter.b.b;
				var s1 = strIter.last;
				s1 = HxOverrides.substr(s1,3,s1.length - 5);
				strIter.c = strIter.str.charCodeAt(strIter.pos++);
				break;
			case 47:
				strIter.c = strIter.str.charCodeAt(strIter.pos++);
				strIter.b = new StringBuf();
				while(strIter.c != 62) {
					strIter.b.b += String.fromCharCode(strIter.c);
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
				}
				strIter.last2 = strIter.last;
				strIter.last = strIter.b.b;
				if(strIter.last == parent.name) {
					parent = parent.parent;
				}
				break;
			case 63:
				strIter.c = strIter.str.charCodeAt(strIter.pos++);
				strIter.b = new StringBuf();
				while(strIter.c != 63) {
					strIter.b.b += String.fromCharCode(strIter.c);
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
				}
				strIter.last2 = strIter.last;
				strIter.last = strIter.b.b;
				strIter.c = strIter.str.charCodeAt(strIter.pos++);
				break;
			default:
				strIter.b = new StringBuf();
				while(strIter.c != 62 && strIter.c != 32) {
					strIter.b.b += String.fromCharCode(strIter.c);
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
				}
				strIter.last2 = strIter.last;
				strIter.last = strIter.b.b;
				var node = new nodule_Nodule();
				node.name = strIter.last;
				nodule1 = node;
				parent.addChild(node);
				parent = node;
				var att = null;
				var toggle = true;
				while(strIter.c != 62) switch(strIter.c) {
				case 32:case 61:
					strIter.c = strIter.str.charCodeAt(strIter.pos++);
					break;
				default:
					strIter.b = new StringBuf();
					while(strIter.c != 62 && strIter.c != 32 && strIter.c != 61) {
						strIter.b.b += String.fromCharCode(strIter.c);
						strIter.c = strIter.str.charCodeAt(strIter.pos++);
					}
					strIter.last2 = strIter.last;
					strIter.last = strIter.b.b;
					var s2 = strIter.last;
					if(toggle) {
						var att_ = new nodule_Nodule();
						att = att_;
						att_.name = s2;
						node.addAttribute(att_);
					} else {
						att.content = HxOverrides.substr(s2,1,s2.length - 2);
					}
					toggle = !toggle;
				}
			}
			break;
		default:
			if(strIter.c == 32) {
				++spaces;
			}
			spaceBuf.b += String.fromCharCode(strIter.c);
		}
		strIter.c = strIter.str.charCodeAt(strIter.pos++);
	}
	return rootNodule;
};
nodule_ReadXML.firstLast = function(s) {
	return HxOverrides.substr(s,1,s.length - 2);
};
nodule_ReadXML.last = function(s) {
	return HxOverrides.substr(s,0,s.length - 1);
};
var nodule_StringCodeIterator = function(str_,pos_) {
	if(pos_ == null) {
		pos_ = 0;
	}
	this.str = "";
	this.pos = pos_;
	this.str = str_;
	this.length = this.str.length;
	this.b = new StringBuf();
};
nodule_StringCodeIterator.__name__ = true;
nodule_StringCodeIterator.prototype = {
	addChar: function() {
		this.b.b += String.fromCharCode(this.c);
	}
	,toStr: function() {
		this.last2 = this.last;
		this.last = this.b.b;
		return this.last;
	}
	,isRepeat: function() {
		return this.last == this.last2;
	}
	,resetBuffer: function() {
		this.b = new StringBuf();
	}
	,reset: function() {
		this.pos = 0;
	}
	,hasNext: function() {
		return this.pos < this.length;
	}
	,next: function() {
		this.c = this.str.charCodeAt(this.pos++);
		return this.c;
	}
	,__class__: nodule_StringCodeIterator
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "test3", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZhbWlseT4KICAgIDxmYXRoZXIgbmFtZSA9ICJLYXdhc2FraSIgdGVzdCA9ICJiaWxsIiB0ZXN0Mj0iZnJlZCI+WWFzdWhpc2E8L2ZhdGhlcj4KPC9mYW1pbHk+"},{ name : "test8", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZhbWlseT4KICAgIDxmYXRoZXIgbmFtZSA9ICJLYXdhc2FraSIgdGVzdCA9ICJiaWxsIiB0ZXN0Mj0iZnJlZCI+WWFzdWhpc2E8L2ZhdGhlcj4KICAgIDxtb3RoZXI+Q2hpenVrbzwvbW90aGVyPgogICAgPGNoaWxkcmVuPgogICAgICAgIDxnaXJsPlNoaW9yaTwvZ2lybD4KICAgICAgICA8Ym95Pll1c3VrZTwvYm95PgogICAgICAgIDxib3k+S2FpcmkgZnJlZDwvYm95PgogICAgPC9jaGlsZHJlbj4gCjwvZmFtaWx5PiAg"},{ name : "test1", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLSBjb21tZW50IC0tPgo8ZmFtaWx5PgogICAgCjwvZmFtaWx5PiAg"},{ name : "test5", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZhbWlseT4KICAgIDxnaXJsPlNoaW9yaTwvZ2lybD4KICAgIDxib3k+WXVzdWtlPC9ib3k+CiAgICA8YmFieT50cmVhY2xlPC9iYWJ5PgogICAgPHVuY2xlPnRvbTwvdW5jbGU+CjwvZmFtaWx5PiA"},{ name : "test0", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLSBjb21tZW50IC0tPg"},{ name : "test4", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZhbWlseT4KICAgIDxib3k+WXVzdWtlPC9ib3k+CiAgICA8Ym95PkthaXJpIGZyZWQ8L2JveT4KPC9mYW1pbHk+IA"},{ name : "test2", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZhbWlseT4KICAgIDxmYXRoZXI+WWFzdWhpc2E8L2ZhdGhlcj4KPC9mYW1pbHk+"},{ name : "test6", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZhbWlseT4KICAgIDxnaXJsPlNoaW9yaTwvZ2lybD4KICAgIDxib3k+WXVzdWtlPC9ib3k+CiAgICA8YmFieT50cmVhY2xlPC9iYWJ5PgogICAgPHVuY2xlPnRvbTwvdW5jbGU+CiAgICA8YXVudD5tYXRpbGRhPC9hdW50Pgo8L2ZhbWlseT4g"}];
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
